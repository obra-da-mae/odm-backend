// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String     @unique
  password          String
  paymentMethod     String?    @default("")
  createdAt         DateTime   @map("created_at") @default(now())
  updatedAt         DateTime   @map("updated_at") @updatedAt
  deletedAt         DateTime?  @map("deleted_at") 

  address           Address[]
  order             Order[]

  @@map("users")
}

model Address {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  user              User       @relation(fields: [userId], references: [id])
  userId            String     @map("user_id")

  address           String     
  postalCode        String     @map("postal_code")
  city              String
  state             String

  createdAt         DateTime   @map("created_at") @default(now())
  updatedAt         DateTime   @map("updated_at") @updatedAt

  @@map("addresses")
}

model Product {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  details           String  
  price             Float
  imageUrl          String?
  available         Boolean
  createdAt         DateTime   @map("created_at") @default(now())
  updatedAt         DateTime   @map("updated_at") @updatedAt

  productSize       ProductSize[]
  order             Order[]

  @@map("products")
}

model ProductSize {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  product           Product    @relation(fields: [productId], references: [id])
  productId         String     @map("product_id")
  size              String

  @@map("products_sizes")
}

model Order {
  id                   String     @id @default(auto()) @map("_id") @db.ObjectId

  user                 User       @relation(fields:[userId], references: [id])
  userId               String     @map("user_id")
  product              Product    @relation(fields: [productId], references: [id])
  productId            String     @map("product_id")

  preparationStatus    String     @map("preparation_status")
  paymentStatus        String     @map("payment_status")

  createdAt            DateTime   @map("created_at")  @default(now())
  updatedAt            DateTime   @map("updated_at")  @updatedAt
  canceledAt           DateTime?  @map("canceled_at")

  @@map("orders")
}